/*
 * AUTOGENERATED - DO NOT EDIT
 *
 * This file is generated from input-method-unstable-v2.xml
 * To regenerate, run the “refresh-wayland-wrapper” target.
 */

#ifndef MIR_FRONTEND_WAYLAND_INPUT_METHOD_UNSTABLE_V2_XML_WRAPPER
#define MIR_FRONTEND_WAYLAND_INPUT_METHOD_UNSTABLE_V2_XML_WRAPPER

#include <optional>

#include "mir/fd.h"
#include <wayland-server-core.h>

#include "mir/wayland/wayland_base.h"

namespace mir
{
namespace wayland
{

class InputMethodV2;
class InputPopupSurfaceV2;
class InputMethodKeyboardGrabV2;
class InputMethodManagerV2;

class InputMethodV2 : public Resource
{
public:
    static char const constexpr* interface_name = "zwp_input_method_v2";

    static InputMethodV2* from(struct wl_resource*);

    InputMethodV2(struct wl_resource* resource, Version<1>);
    virtual ~InputMethodV2();

    void send_activate_event() const;
    void send_deactivate_event() const;
    void send_surrounding_text_event(std::string const& text, uint32_t cursor, uint32_t anchor) const;
    void send_text_change_cause_event(uint32_t cause) const;
    void send_content_type_event(uint32_t hint, uint32_t purpose) const;
    void send_done_event() const;
    void send_unavailable_event() const;

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Opcode
    {
        static uint32_t const activate = 0;
        static uint32_t const deactivate = 1;
        static uint32_t const surrounding_text = 2;
        static uint32_t const text_change_cause = 3;
        static uint32_t const content_type = 4;
        static uint32_t const done = 5;
        static uint32_t const unavailable = 6;
    };

    struct Thunks;

    static bool is_instance(wl_resource* resource);

private:
    virtual void commit_string(std::string const& text) = 0;
    virtual void set_preedit_string(std::string const& text, int32_t cursor_begin, int32_t cursor_end) = 0;
    virtual void delete_surrounding_text(uint32_t before_length, uint32_t after_length) = 0;
    virtual void commit(uint32_t serial) = 0;
    virtual void get_input_popup_surface(struct wl_resource* id, struct wl_resource* surface) = 0;
    virtual void grab_keyboard(struct wl_resource* keyboard) = 0;
};

class InputPopupSurfaceV2 : public Resource
{
public:
    static char const constexpr* interface_name = "zwp_input_popup_surface_v2";

    static InputPopupSurfaceV2* from(struct wl_resource*);

    InputPopupSurfaceV2(struct wl_resource* resource, Version<1>);
    virtual ~InputPopupSurfaceV2();

    void send_text_input_rectangle_event(int32_t x, int32_t y, int32_t width, int32_t height) const;

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Opcode
    {
        static uint32_t const text_input_rectangle = 0;
    };

    struct Thunks;

    static bool is_instance(wl_resource* resource);

private:
};

class InputMethodKeyboardGrabV2 : public Resource
{
public:
    static char const constexpr* interface_name = "zwp_input_method_keyboard_grab_v2";

    static InputMethodKeyboardGrabV2* from(struct wl_resource*);

    InputMethodKeyboardGrabV2(struct wl_resource* resource, Version<1>);
    virtual ~InputMethodKeyboardGrabV2();

    void send_keymap_event(uint32_t format, mir::Fd fd, uint32_t size) const;
    void send_key_event(uint32_t serial, uint32_t time, uint32_t key, uint32_t state) const;
    void send_modifiers_event(uint32_t serial, uint32_t mods_depressed, uint32_t mods_latched, uint32_t mods_locked, uint32_t group) const;
    void send_repeat_info_event(int32_t rate, int32_t delay) const;

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Opcode
    {
        static uint32_t const keymap = 0;
        static uint32_t const key = 1;
        static uint32_t const modifiers = 2;
        static uint32_t const repeat_info = 3;
    };

    struct Thunks;

    static bool is_instance(wl_resource* resource);

private:
};

class InputMethodManagerV2 : public Resource
{
public:
    static char const constexpr* interface_name = "zwp_input_method_manager_v2";

    static InputMethodManagerV2* from(struct wl_resource*);

    InputMethodManagerV2(struct wl_resource* resource, Version<1>);
    virtual ~InputMethodManagerV2();

    struct wl_client* const client;
    struct wl_resource* const resource;

    struct Thunks;

    static bool is_instance(wl_resource* resource);

private:
    virtual void get_input_method(struct wl_resource* seat, struct wl_resource* input_method) = 0;
};

class InputMethodManagerV2Global : public wayland::Global
{
public:
    InputMethodManagerV2Global(wl_display* display, Version<1>);

private:
    virtual void bind(wl_resource* new_zwp_input_method_manager_v2) = 0;
    friend InputMethodManagerV2::Thunks;
};

}
}

#endif // MIR_FRONTEND_WAYLAND_INPUT_METHOD_UNSTABLE_V2_XML_WRAPPER
